<?php

class Address
{
	private $_mgr;

	public $ID;
	public $CityID;

	public $Name;
	public $Address;
	public $Created;
	public $LastUpdated;
	public $IsAvailable;
	public $PhoneCode;
	public $Phone;
	public $Skype;
	public $ICQ;
	public $Email;
	public $Latitude;
	public $Longitude;
	public $HasPickup;
	public $Ord;

	private $LogoSmall;
	private $LogoBig;

	private $_images_dir = '/common_fs/i/city_address/';
	private $_images_url = '/resources/fs/i/city_address/';

	private $_files_dir = '/common_fs/f/stores/';
	private $_files_url = '/resources/fs/f/stores/';

	private $_photo_small_size = array('max_width' => 128, 'max_height' => 114);
	private $_photo_big_size = array('max_width' => 451, 'max_height' => 375);


	function __construct(array $info)
	{
		global $OBJECTS;

		$info = array_change_key_case($info, CASE_LOWER);

		if ( isset($info['addressid']) && Data::Is_Number($info['addressid']) )
			$this->ID = $info['addressid'];

		$this->CityID      = (int) $info['cityid'];
		$this->Created     = $info['created'];
		$this->LastUpdated = $info['lastupdated'];
		$this->Name        = stripslashes($info['name']);
		$this->Address     = stripslashes($info['address']);
		$this->ICQ         = stripslashes($info['icq']);
		$this->Skype       = stripslashes($info['skype']);
		$this->Email       = stripslashes($info['email']);
		$this->Phone       = stripslashes($info['phone']);
		$this->PhoneCode   = stripslashes($info['phonecode']);
		$this->Latitude    = stripslashes($info['latitude']);
		$this->Longitude   = stripslashes($info['longitude']);
		$this->LogoSmall   = $info['logosmall'];
		$this->LogoBig     = $info['logobig'];

		$this->IsAvailable = $info['isavailable']  ? true : false;
		$this->HasPickup   = $info['haspickup']  ? true : false;

		$this->Ord = 0;
		if ( isset($info['ord']) )
			$this->Ord = (int) $info['ord'];
	}

	/**
	 * сохранить информацию в базе
	 * использует метод плагина и метод
	 */
	public function Update()
	{
		$info = array(
			'CityID'      => $this->CityID,
			'Name'        => $this->Name,
			'Address'     => $this->Address,
			'LogoSmall'   => $this->LogoSmall,
			'LogoBig'     => $this->LogoBig,
			'Email'       => $this->Email,
			'Skype'       => $this->Skype,
			'ICQ'         => $this->ICQ,
			'Phone'       => $this->Phone,
			'PhoneCode'   => $this->PhoneCode,
			'Latitude'    => $this->Latitude,
			'Longitude'   => $this->Longitude,
			'IsAvailable' => (int) $this->IsAvailable,
			'HasPickup'   => (int) $this->HasPickup,
			'Ord'         => (int) $this->Ord,
		);

		if ( $this->ID !== null ) {
			$info['AddressID'] = $this->ID;
			if ( false !== CitiesMgr::getInstance()->UpdateAddress($info)) {
				return true;
			}
		} else if ( false !== ($new_id = CitiesMgr::getInstance()->AddAddress($info))) {
			$this->ID = $new_id;

			return $new_id;
		}

		return false;
	}

	public function Remove() {
		if ( $this->ID === null)
			return false;

		CitiesMgr::getInstance()->RemoveStore($this->ID);
	}


	public function AsArray()
	{
		return array(
			'AddressID'   => $this->ID,
			'Name'        => $this->Name,
			'Address'     => $this->Address,
			'Email'       => $this->Email,
			'Skype'       => $this->Skype,
			'ICQ'         => $this->ICQ,
			'Phone'       => $this->Phone,
			'PhoneCode'   => $this->PhoneCode,
			'Longitude'   => $this->Longitude,
			'Latitude'    => $this->Latitude,
			'IsAvailable' => (int) $this->IsAvailable,
			'HasPickup'   => (int) $this->HasPickup,
			'Ord'         => (int) $this->Ord,
		);
	}

	public function UploadLogoSmall() {

		$result = $this->_uploadImages(array(
			'small' => 'logosmall'
		));

		if ($result === true)
			return $result;

		$this->__set('LogoSmall', null);
		return $result;
	}

	public function UploadLogoBig() {

		$result = $this->_uploadImages(array(
			'big' => 'logobig'
		));

		if ($result === true)
			return $result;

		$this->__set('LogoBig', null);
		return $result;
	}

	private function _uploadImages(array $images) {

		global $OBJECTS;
		LibFactory::GetStatic('filestore');
		LibFactory::GetStatic('filemagic');
		$images = array_change_key_case($images, CASE_LOWER);

		$errors = array();
		foreach($images as $k => $v) {
			if (!in_array((string) $k, array('small', 'big')) )
				continue ;

			if (empty($_FILES[$v]['name']))
				continue ;

			$resize = array();
			if ($k == 'small') {
				$resize = array (
					'resize' => array(
							'tr' => 0,
							'w'  => $this->{"_photo_{$k}_size"}['max_width'],
							'h'  => $this->{"_photo_{$k}_size"}['max_height'],
						),
				);
			}

			$pname = FileStore::Upload_NEW(
				$v, $this->_images_dir, rand(1000, 9999).$this->ID.'_'.$k,
				FileMagic::MT_WIMAGE, $this->_photo_file_size,

				$resize

			);

			$pname = FileStore::GetPath_NEW($pname);
			$thumbNew = Images::PrepareImageToObject($pname, $this->_images_dir);
			$pname = FileStore::ObjectToString($thumbNew);

			$this->__set($v, $pname);
		}

		return true;
	}

	/**
	 * Удаляет файл картинки .
	 *
	 * @param string name - имя файла либо объект
	 * @return boolean - если удалился, то true
	 */
	private function _deleteImage($name)
	{
		try
		{
			if( ($img_obj = FileStore::ObjectFromString($name)) !== false )
			{
				$del_file = $this->_images_dir.FileStore::GetPath_NEW($img_obj['file']);
				if (FileStore::IsFile($del_file))
					return FileStore::Delete_NEW($del_file);
			}
		}
		catch(MyException $e) { }
		return false;
	}

	public function __set($name, $value) {
		LibFactory::GetStatic('images');
        LibFactory::GetStatic('filestore');

		$name = strtolower($name);
		switch($name) {
			case 'logosmall':
				if ($value === null) {
					if ($this->LogoSmall)
						$this->_deleteImage($this->LogoSmall);

					$this->LogoSmall = '';
					return $value;
				}

				try
				{
					if( ($img_obj = FileStore::ObjectFromString($value)) !== false )
					{
						$file = $this->_images_dir.FileStore::GetPath_NEW($img_obj['file']);
						if (FileStore::IsFile($file)) {
							$this->__set($name, null);
							return $this->LogoSmall = FileStore::ObjectToString($img_obj);
						}
					}
				}
				catch(MyException $e) { }

			break;
			case 'logobig':
				if ($value === null) {
					if ($this->LogoBig)
						$this->_deleteImage($this->LogoBig);

					$this->LogoBig = '';
					return $value;
				}

				try
				{
					if( ($img_obj = FileStore::ObjectFromString($value)) !== false )
					{
						$file = $this->_images_dir.FileStore::GetPath_NEW($img_obj['file']);
						if (FileStore::IsFile($file)) {
							$this->__set($name, null);
							return $this->LogoBig = FileStore::ObjectToString($img_obj);
						}
					}
				}
				catch(MyException $e) { }
			break;
		}
		return null;
	}

	public function __get($name) {

		$name = strtolower($name);
		switch($name) {
			case 'city':
				return CitiesMgr::getInstance()->GetDelivery($this->DeliveryID);
			case 'logosmall':
				if (!$this->LogoSmall)
					return null;

				LibFactory::GetStatic('images');
				LibFactory::GetStatic('filestore');

				try
				{
					$img_obj = FileStore::ObjectFromString($this->LogoSmall);
					$img_obj['file'] = FileStore::GetPath_NEW($img_obj['file']);
					$preparedImage = Images::PrepareImageFromObject($img_obj,
						$this->_images_dir, $this->_images_url);
					unset($img_obj);
					if (empty($preparedImage))
						return null;
				}
				catch ( MyException $e )
				{
					return null;
				}

				return array(
					'f' => $preparedImage['url'],
					'w' => $preparedImage['w'],
					'h' => $preparedImage['h'],
				);
			break;
			case 'logobig':
				if (!$this->LogoBig)
					return null;

				LibFactory::GetStatic('images');
				LibFactory::GetStatic('filestore');

				try
				{
					$img_obj = FileStore::ObjectFromString($this->LogoBig);
					$img_obj['file'] = FileStore::GetPath_NEW($img_obj['file']);
					$preparedImage = Images::PrepareImageFromObject($img_obj,
						$this->_images_dir, $this->_images_url);
					unset($img_obj);
					if (empty($preparedImage))
						return null;
				}
				catch ( MyException $e )
				{
					return null;
				}

				return array(
					'f' => $preparedImage['url'],
					'w' => $preparedImage['w'],
					'h' => $preparedImage['h'],
				);
			break;
		}

		return null;
	}

	function __destruct()
	{

	}
}

