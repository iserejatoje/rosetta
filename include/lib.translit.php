<?
	
class Translit
{
	// исходя из различных последовательностей перевода, необходимо использовать двухуровнеые таблицы транслитерации
	static private $table = array(
		'ru' => array(
			'en' => array(	
				'а' => 'a',   'б' => 'b',   'в' => 'v',   'г' => 'g',   'д' => 'd',   'е' => 'e',   'ё' => 'yo',
				'ж' => 'zh',  'з' => 'z',   'и' => 'i',   'й' => 'j',   'к' => 'k',   'л' => 'l',   'м' => 'm',
				'н' => 'n',   'о' => 'o',   'п' => 'p',   'р' => 'r',   'с' => 's',   'т' => 't',   'у' => 'u',
				'ф' => 'f',   'х' => 'x',   'ц' => 'c',   'ч' => 'ch',  'ш' => 'sh',  'щ' => 'shh', 'ъ' => '``',
				'ы' => 'y\'', 'ь' => '`',   'э' => 'e`',  'ю' => 'yu',  'я' => 'ya',
				'А' => 'A',   'Б' => 'B',   'В' => 'V',   'Г' => 'G',   'Д' => 'D',   'Е' => 'E',   'Ё' => 'Yo',
				'Ж' => 'Zh',  'З' => 'Z',   'И' => 'I',   'Й' => 'J',   'К' => 'K',   'Л' => 'L',   'М' => 'M',
				'Н' => 'N',   'О' => 'O',   'П' => 'P',   'Р' => 'R',   'С' => 'S',   'Т' => 'T',   'У' => 'U',
				'Ф' => 'F',   'Х' => 'X',   'Ц' => 'C',   'Ч' => 'Ch',  'Ш' => 'Sh',  'Щ' => 'Shh', 'Ъ' => '``',
				'Ы' => 'Y\'', 'Ь' => '`',   'Э' => 'E`',  'Ю' => 'Yu',  'Я' => 'Ya',
				' ' => ' '
			),
		),
		'en' => array(
			'ru' => array(
				's' => array('h' => array('h' => 'щ', '' => 'ш'), '' => 'с'),
				'S' => array('h' => array('h' => 'Щ', '' => 'Ш'), '' => 'С'),
				'y' => array('a' => 'я', 'o' => 'ё', 'u' => 'ю', '' => 'ы'),
				'Y' => array('a' => 'Я', 'o' => 'Ё', 'u' => 'Ю', '' => 'Ы'),
				'z' => array('h' => 'ж', '' => 'з'),
				'Z' => array('h' => 'Ж', '' => 'З'),
				'c' => array('h' => 'ч', 'z' => 'ц', '' => 'ц'),
				'C' => array('h' => 'Ч', 'z' => 'Ц', '' => 'Ц'),
				'k' => array('h' => 'х', '' => 'к'),
				'K' => array('h' => 'Х', '' => 'К'),
				'e' => array('`' => 'э', '' => 'е'),
				'E' => array('`' => 'Э', '' => 'Е'),
				'`' => array('`' => 'ъ', '' => 'ь'),			
				'a' => 'а',   'b' => 'б',   'd' => 'д',   'f' => 'ф',   'g' => 'г',   
				'h' => 'х',   'i' => 'и',	'j' => 'й',   'l' => 'л',   'm' => 'м',   'n' => 'н',   
				'o' => 'о',   'p' => 'п',	'q' => 'щ',   'r' => 'р',   't' => 'т',   'u' => 'у',   
				'v' => 'в',   'w' => 'ы',   'x' => 'х',
				'A' => 'А',   'B' => 'Б',   'D' => 'Д',   'F' => 'Ф',   'G' => 'Г',   
				'H' => 'Х',   'I' => 'И',	'J' => 'Й',   'L' => 'Л',   'М' => 'м',   'N' => 'Н',   
				'O' => 'О',   'P' => 'П',	'Q' => 'Щ',   'R' => 'Р',   'T' => 'Т',   'U' => 'У',   
				'V' => 'В',   'W' => 'В',   'X' => 'Х',
				' ' => ' '
			),
		),
	);

	/**
	 * Коневертация из одной кодировки транслита в другую
	 * @param string $text строка для конвертации
	 * @param string $from исходная кодировка
	 * @param string $to конечная кодировка кодировка
	 * @param boolean $copy_unknown копировать неконвертируемые символы (true - копировать, false - удалять)
	 */
	static public function Convert($text, $from, $to, $copy_unknown = true)
	{
		$len = strlen($text);
		$leaf = null;
		$cleaf = null;
		$out = '';
		for($pos = 0; $pos < $len; $pos++)
		{
			$symb = substr($text, $pos, 1);
			if($leaf !== null)
				$cleaf =& $leaf;
			else
				$cleaf =& self::$table[$from][$to];
			
			if(isset($cleaf[$symb]))
			{
				if(is_array($cleaf[$symb]))
				{
					$leaf =& $cleaf[$symb];
				}
				else
				{
					$out.= $cleaf[$symb];
					$leaf = null;
				}
			}
			elseif($leaf !== null)
			{
				$out.= $leaf[''];
				$leaf = null;
				continue;
			}
			elseif($copy_unknown === true)
				$out.= $symb;
		}
		if($leaf !== null)
			$out.= $leaf[''];
		return $out;
	}
}

?>